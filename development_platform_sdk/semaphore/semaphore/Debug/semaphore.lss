
semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000180  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d3  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000137  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000195  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
	DDRB |= (1<<0) | (1<<1) | (1<<2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 60       	ori	r24, 0x07	; 7
  84:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<PB0) & (0<<PB1) & (0<<PB2);
  86:	15 b8       	out	0x05, r1	; 5
	
    while(1)
    {
		PORTB = (1<<PB0);
  88:	21 e0       	ldi	r18, 0x01	; 1
		_delay_ms(3000);
		
		PORTB = (0<<PB0) | (1<<PB1);
  8a:	92 e0       	ldi	r25, 0x02	; 2
		_delay_ms(2000);
		
		PORTB = (0<<PB0) | (0<<PB1) | (1<<PB2);
  8c:	84 e0       	ldi	r24, 0x04	; 4
	DDRB |= (1<<0) | (1<<1) | (1<<2);
	PORTB = (0<<PB0) & (0<<PB1) & (0<<PB2);
	
    while(1)
    {
		PORTB = (1<<PB0);
  8e:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	3f ef       	ldi	r19, 0xFF	; 255
  92:	4f e3       	ldi	r20, 0x3F	; 63
  94:	55 e6       	ldi	r21, 0x65	; 101
  96:	31 50       	subi	r19, 0x01	; 1
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	50 40       	sbci	r21, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
		_delay_ms(3000);
		
		PORTB = (0<<PB0) | (1<<PB1);
  a2:	95 b9       	out	0x05, r25	; 5
  a4:	3f ef       	ldi	r19, 0xFF	; 255
  a6:	4f e7       	ldi	r20, 0x7F	; 127
  a8:	53 e4       	ldi	r21, 0x43	; 67
  aa:	31 50       	subi	r19, 0x01	; 1
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	50 40       	sbci	r21, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
		_delay_ms(2000);
		
		PORTB = (0<<PB0) | (0<<PB1) | (1<<PB2);
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	3f ef       	ldi	r19, 0xFF	; 255
  ba:	4f eb       	ldi	r20, 0xBF	; 191
  bc:	58 ea       	ldi	r21, 0xA8	; 168
  be:	31 50       	subi	r19, 0x01	; 1
  c0:	40 40       	sbci	r20, 0x00	; 0
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
  ca:	e1 cf       	rjmp	.-62     	; 0x8e <main+0xe>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
